!function(e){"use strict";e.module("angular-elastic-builder",["RecursionHelper","ui.bootstrap"])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").directive("elasticBuilder",["elasticQueryService",function(e){return{scope:{data:"=elasticBuilder"},templateUrl:"angular-elastic-builder/BuilderDirective.html",link:function(t){var n=t.data;n.filters&&(t.filters=n.filters),t.removeChild=function(e){t.filters.splice(e,1)},t.addRule=function(){t.filters.push({})},t.addGroup=function(){var e={type:"group",subType:"bool",rules:[{type:"group",subType:"must",rules:[]}]};t.filters.push(e)},t.$watch("data.needsUpdate",function(a){a&&(t.filters=e.toFilters(n.query,t.data.fields),t.data.needsUpdate=!1)}),t.$watch("filters",function(a){if(a){var i=e.toQuery(t.filters,t.data.fields);n.query=i}},!0)}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderChooser",["RecursionHelper","groupClassHelper",function(e,t){return{scope:{elasticFields:"=",item:"=elasticBuilderChooser",onRemove:"&"},templateUrl:"angular-elastic-builder/ChooserDirective.html",compile:function(n){return e.compile(n,function(e,n,a){var i=e.depth=+a.depth,l=e.item;e.getGroupClassName=function(){var e=i;return"group"===l.type&&e++,t(e)}})}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderGroup",["RecursionHelper","groupClassHelper",function(e,t){return{scope:{elasticFields:"=",group:"=elasticBuilderGroup",onRemove:"&"},templateUrl:"angular-elastic-builder/GroupDirective.html",compile:function(n){return e.compile(n,function(e,n,a){var i=e.depth=+a.depth,l=e.group;e.addRule=function(){l.rules.push({})},e.addGroup=function(){var e={type:"group",subType:"bool",rules:[{type:"group",subType:"must",rules:[]}]};"bool"==l.subType&&(e={type:"group",subType:"must",rules:[]}),l.rules.push(e)},e.removeChild=function(e){l.rules.splice(e,1)},e.getGroupClassName=function(){return t(i+1)}})}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderRule",[function(){return{scope:{elasticFields:"=",rule:"=elasticBuilderRule",onRemove:"&"},templateUrl:"angular-elastic-builder/RuleDirective.html",link:function(e){e.getType=function(){var t=e.elasticFields,n=e.rule.field;if(t&&n)return"boolean"===n.subType?"boolean":n.type}}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticType",[function(){return{scope:{type:"=elasticType",rule:"=",guide:"="},template:'<ng-include src="getTemplateUrl()" />',link:function(e){function t(e){var t=e.date,n=e.mode;return"day"===n&&(0===t.getDay()||6===t.getDay())}e.getTemplateUrl=function(){var t=e.type;if(t)return t=t.charAt(0).toUpperCase()+t.slice(1),"angular-elastic-builder/types/"+t+".html"},e.booleans=["False","True"],e.booleansOrder=["True","False"],e.inputNeeded=function(){var t=["equals","notEquals","match_phrase","gt","gte","lt","lte"];return~t.indexOf(e.rule.subType)},e.inputPercentNeeded=function(){var t=["match"];return~t.indexOf(e.rule.subType)},e.numberNeeded=function(){var t=["last","next"];return~t.indexOf(e.rule.subType)},e.today=function(){e.rule.date=new Date},e.today(),e.clear=function(){e.rule.date=null},e.dateOptions={dateDisabled:t,formatYear:"yy",maxDate:new Date(2018,1,13),minDate:new Date,startingDay:1},e.open1=function(){e.popup1.opened=!0},e.setDate=function(t,n,a){e.rule.date=new Date(t,n-1,a)},e.formats=["yyyy-MM-ddTHH:mm:ss","yyyy-MM-ddTHH:mm:ssZ","yyyy-MM-dd","dd-MMMM-yyyy","yyyy/MM/dd","shortDate"],e.rule.dateFormat=e.formats[0],e.format=e.rule.dateFormat,e.altInputFormats=["M!/d!/yyyy"],e.popup1={opened:!1}}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").factory("groupClassHelper",function(){return function(e){var t=["","list-group-item-info","list-group-item-success","list-group-item-warning","list-group-item-danger"];return t[e%t.length]}})}(window.angular),function(e){"use strict";function t(e,t){var n=[];Object.keys(e).forEach(function(t){var a={};a[t]=e[t],n.push(a)});var i=n.map(a.bind(n,t)).filter(function(e){return!!e});return i}function n(e,t,n){var a=e.map(i.bind(e,t,n)).filter(function(e){return!!e}),l={};return a.forEach(function(e){Object.keys(e).forEach(function(t){l[t]=e[t]})}),l}function a(t,n,i){i!==!1&&(i=!0);var r=Object.keys(n)[0],s={bool:"group",must:"group",should:"group",must_not:"group",filter:"group",range:"number"},u=s[r]||"item",o=l(u);switch(r){case"bool":var d=[];Object.keys(n[r]).forEach(function(e){var t={};t[e]=n[r][e],d.push(t)}),o.rules=d.map(a.bind(n,t)),o.subType=r;break;case"should":case"must":case"must_not":case"filter":o.rules=n[r].map(a.bind(n,t)),o.subType=r;break;case"missing":case"exists":var c=n[r].field,p=t.filter(function(e){return e.name==c});if(!p.length)return console.log("No fieldData",t),{};o.field=p[0],o.subType={exists:"exists",missing:"notExists"}[r],delete o.value;break;case"match":case"match_phrase":var c=Object.keys(n[r])[0],p=t.filter(function(e){return e.name==c});if(!p.length)return console.log("No fieldData",t),{};o.field=p[0],"match"!=r?o.value=n[r][c].slop:o.matchingPercent=parseInt(n[r][c].minimum_should_match.slice(0,-1)),o.subType=r;break;case"term":case"terms":var c=Object.keys(n[r])[0],p=t.filter(function(e){return e.name==c});if(!p.length)return console.log("No fieldData",t),{};if(o.field=p[0],"multi"===p.type){var f=n[r][c];"string"==typeof f&&(f=[f]),o.values=p.choices.reduce(function(e,t){return e[t]=n[r][c].indexOf(t)!==-1,e},{})}else o.subType=i?"equals":"notEquals",o.value=n[r][c],"number"==typeof o.value&&(o.subType="boolean");break;case"range":var m,g;if(o.field=Object.keys(n[r])[0],o.subType=Object.keys(n[r][o.field])[0],e.isNumber(n[r][o.field][o.subType])){o.value=n[r][o.field][o.subType];break}if(e.isDefined(Object.keys(n[r][o.field])[1])){if(m=n[r][o.field].gte,~m.indexOf("now-")){o.subType="last",o.value=parseInt(m.split("now-")[1].split("d")[0]);break}if(~m.indexOf("now")){o.subType="next",m=n[r][o.field].lte,o.value=parseInt(m.split("now+")[1].split("d")[0]);break}o.subType="equals",g=m.split("T")[0].split("-"),o.date=g[2]+"/"+g[1]+"/"+g[0];break}m=n[r][o.field][o.subType],g=m.split("T")[0].split("-"),o.date=g[2]+"/"+g[1]+"/"+g[0];break;case"not":o=a(t,n[r].filter,!1);break;default:o.field=Object.keys(n[r])[0]}return o}function i(t,n,a){var l={};if("group"===a.type){if(l={},"bool"===a.subType){var s=a.rules.map(i.bind(a,t,n)).filter(function(e){return!!e});return l[a.subType]={},s.forEach(function(e){l[a.subType][Object.keys(e)[0]]=e[Object.keys(e)[0]]}),l}return l[a.subType]=a.rules.map(i.bind(a,t,n)).filter(function(e){return!!e}),l}var u=a.field,o=t.find(function(t){return"object"==typeof u?e.equals(t,u):t.name==u});if(o){var d=o.name;if(d){switch(o.type){case"term":if("boolean"===o.subType&&(a.subType="boolean"),!a.subType)return;switch(a.subType){case"equals":case"boolean":if(void 0===a.value)return;l.term={},l.term[d]=a.value;break;case"notEquals":if(void 0===a.value)return;l.not={filter:{term:{}}},l.not.filter.term[d]=a.value;break;case"exists":l.exists={field:d};break;case"notExists":if(void 0===a.value)return;l.missing={field:d};break;case"match":if(void 0===a.matchingPercent)return;l={match:{}},l.match[d]={},l.match[d].query="%"+d+"%",l.match[d].minimum_should_match=a.matchingPercent+"%",l.match[d].operator="and";break;case"match_phrase":if(void 0===a.value)return;l={match_phrase:{}},l.match_phrase[d]={},l.match_phrase[d].query="%"+d+"%",l.match_phrase[d].slop=a.value;break;default:throw new Error("unexpected subtype "+a.subType)}break;case"number":l.range={},l.range[d]={},l.range[d][a.subType]=a.value;break;case"date":if(!a.subType)return;switch(a.subType){case"equals":if(!e.isDate(a.date))return;l.term={},l.term[d]=r(n,a.date,a.dateFormat);break;case"lt":case"lte":if(!e.isDate(a.date))return;l.range={},l.range[d]={},l.range[d][a.subType]=r(n,a.date,a.dateFormat);break;case"gt":case"gte":if(!e.isDate(a.date))return;l.range={},l.range[d]={},l.range[d][a.subType]=r(n,a.date,a.dateFormat);break;case"last":if(!e.isNumber(a.value))return;l.range={},l.range[d]={},l.range[d].gte="now-"+a.value+"d",l.range[d].lte="now";break;case"next":if(!e.isNumber(a.value))return;l.range={},l.range[d]={},l.range[d].gte="now",l.range[d].lte="now+"+a.value+"d";break;case"exists":l.exists={field:d};break;case"notExists":l.missing={field:d};break;default:throw new Error("unexpected subtype "+a.subType)}break;case"multi":l.terms={},l.terms[d]=Object.keys(a.values||{}).reduce(function(e,t){return a.values[t]&&e.push(t),e},[]);break;default:throw new Error("unexpected type")}return l}}}function l(t){var n={group:{type:"group",subType:"",rules:[]},item:{field:"",subType:"",value:""},number:{field:"",subType:"",value:null}};return e.copy(n[t])}function r(t,n,a){if(!e.isDate(n))return!1;var i=t("date")(n,a);return i}e.module("angular-elastic-builder").factory("elasticQueryService",["$filter",function(e){return{toFilters:t,toQuery:function(t,a){return n(t,a,e)}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").run(["$templateCache",function(e){e.put("angular-elastic-builder/BuilderDirective.html",'<div class="elastic-builder">\n  <div class="filter-panels">\n    <div class="list-group form-inline">\n      <div\n        data-ng-repeat="filter in filters"\n        data-elastic-builder-chooser="filter"\n        data-elastic-fields="data.fields"\n        data-on-remove="removeChild($index)"\n        data-depth="0"></div>\n        <div class="list-group-item actions">\n        <!--   <a class="btn btn-xs btn-primary" title="Add Rule" data-ng-click="addRule()">\n          <i class="fa fa-plus"></i>\n        </a>-->\n        <a class="btn btn-xs btn-primary" title="Add Group" data-ng-click="addGroup()">\n          <i class="fa fa-list"></i>\n        </a>\n      </div>\n    </div>\n  </div>\n</div>\n'),e.put("angular-elastic-builder/ChooserDirective.html",'<div ng-if="item.subType != \'bool\'"\n  class="list-group-item elastic-builder-chooser"\n  data-ng-class="getGroupClassName()">\n\n  <div data-ng-if="item.type === \'group\'"\n    data-elastic-builder-group="item"\n    data-depth="{{ depth }}"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n  <div data-ng-if="item.type !== \'group\'"\n    data-elastic-builder-rule="item"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n</div>\n\n<div ng-if="item.subType == \'bool\'"\n  class="list-group-item elastic-builder-chooser"\n  data-ng-class="getGroupClassName()">\n\n  <div data-ng-if="item.type === \'group\'"\n    data-elastic-builder-group="item"\n    data-depth="{{ depth }}"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n</div>\n'),e.put("angular-elastic-builder/GroupDirective.html",'<div class="elastic-builder-group">\n  <h5 ng-if="group.subType != \'bool\'">\n    <select data-ng-model="group.subType" class="form-control">\n      <option value="must">must</option>\n      <option value="must_not">must_not</option>\n      <option value="should">should</option>\n      <option value="filter">filter</option>\n    </select>\n    Match these conditions\n  </h5>\n\n  <div\n    data-ng-repeat="rule in group.rules"\n    data-elastic-builder-chooser="rule"\n    data-elastic-fields="elasticFields"\n    data-depth="{{ +depth + 1 }}"\n    data-on-remove="removeChild($index)"></div>\n\n  <div class="list-group-item actions" data-ng-class="getGroupClassName()">\n    <a class="btn btn-xs btn-primary" title="Add Sub-Rule" data-ng-click="addRule()">\n      <i class="fa fa-plus"></i>\n    </a>\n    <a class="btn btn-xs btn-primary" title="Add Sub-Group" data-ng-click="addGroup()">\n      <i class="fa fa-list"></i>\n    </a>\n  </div>\n\n  <a class="btn btn-xs btn-danger remover" data-ng-click="onRemove()">\n    <i class="fa fa-minus"></i>\n  </a>\n</div>\n'),e.put("angular-elastic-builder/RuleDirective.html",'<div class="elastic-builder-rule">\n  <select class="form-control" data-ng-model="rule.field" data-ng-options="field as field.title for (key,field) in elasticFields track by field.name"></select>\n\n  <span data-elastic-type="getType()" data-rule="rule" data-guide="elasticFields[rule.field]"></span>\n\n  <a class="btn btn-xs btn-danger remover" data-ng-click="onRemove()">\n    <i class="fa fa-minus"></i>\n  </a>\n\n</div>\n'),e.put("angular-elastic-builder/types/Boolean.html",'<span class="boolean-rule">\n  Equals\n\n  <!-- This is a weird hack to make sure these are numbers -->\n  <select\n    data-ng-model="rule.value"\n    class="form-control"\n    data-ng-options="booleans.indexOf(choice) as choice for choice in booleansOrder">\n  </select>\n</span>\n'),e.put("angular-elastic-builder/types/Date.html",'<span class="date-rule form-inline">\n  <select data-ng-model="rule.subType" class="form-control">\n    <optgroup label="Exact">\n      <option value="equals">=</option>\n    </optgroup>\n    <optgroup label="Unbounded-range">\n      <option value="lt">&lt;</option>\n      <option value="lte">&le;</option>\n      <option value="gt">&gt;</option>\n      <option value="gte">&ge;</option>\n    </optgroup>\n    <optgroup label="Bounded-range">\n      <option value="last">In the last</option>\n      <option value="next">In the next</option>\n    </optgroup>\n    <optgroup label="Generic">\n      <option value="exists">Exists</option>\n      <option value="notExists">! Exists</option>\n    </optgroup>\n  </select>\n\n  <div class="form-group">\n    <div class="input-group">\n      <input data-ng-if="inputNeeded()"\n        type="text"\n        class="form-control"\n        data-uib-datepicker-popup="{{ rule.dateFormat }}"\n        data-ng-model="rule.date"\n        data-is-open="popup1.opened"\n        data-datepicker-options="dateOptions"\n        data-ng-required="true"\n        data-close-text="Close" />\n      <div class="input-group-btn">\n        <button type="button" class="btn btn-default" ng-click="open1()" data-ng-if="inputNeeded()">\n          <i class="fa fa-calendar"></i>\n        </button>\n      </div>\n    </div>\n  </div>\n\n  <span class="form-inline">\n    <div class="form-group">\n      <label data-ng-if="inputNeeded()">Format</label>\n      <select\n        class="form-control"\n        data-ng-model="rule.dateFormat"\n        data-ng-if="inputNeeded()"\n        ng-options="f for f in formats"></select>\n    </div>\n  </span>\n\n  <span data-ng-if="numberNeeded()">\n    <input type="number" class="form-control" data-ng-model="rule.value" min=0> days\n  </span>\n\n</span>\n'),e.put("angular-elastic-builder/types/Multi.html",'<span class="multi-rule">\n  <span data-ng-repeat="choice in guide.choices">\n    <label class="checkbox">\n      <input type="checkbox" data-ng-model="rule.values[choice]">\n      {{ choice }}\n    </label>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/Number.html",'<span class="number-rule">\n  <select data-ng-model="rule.subType" class="form-control">\n    <optgroup label="Numeral">\n      <option value="equals">=</option>\n      <option value="gt">&gt;</option>\n      <option value="gte">&ge;</option>\n      <option value="lt">&lt;</option>\n      <option value="lte">&le;</option>\n    </optgroup>\n\n    <optgroup label="Generic">\n      <option value="exists">Exists</option>\n      <option value="notExists">! Exists</option>\n    </optgroup>\n  </select>\n\n  <!-- Range Fields -->\n  <input data-ng-if="inputNeeded()"\n    class="form-control"\n    data-ng-model="rule.value"\n    type="number"\n    min="{{ guide.minimum }}"\n    max="{{ guide.maximum }}">\n</span>\n'),e.put("angular-elastic-builder/types/Term.html",'<span class="elastic-term">\n  <select data-ng-model="rule.subType" class="form-control">\n\n    <!-- Matching Options -->\n    <optgroup label="Matching">\n      <option value="match">Minimum Should Match (%)</option>\n      <option value="match_phrase">Match Phrase (slop)</option>\n      <!-- <option value="notMatch">! Match</option> -->\n    </optgroup>\n\n    <!-- Term Options -->\n    <optgroup label="Text">\n      <option value="equals">Equals</option>\n      <option value="notEquals">! Equals</option>\n    </optgroup>\n\n    <!-- Generic Options -->\n    <optgroup label="Generic">\n      <option value="exists">Exists</option>\n      <option value="notExists">! Exists</option>\n    </optgroup>\n\n  </select>\n  <input\n    data-ng-if="inputNeeded()"\n    class="form-control"\n    data-ng-model="rule.value"\n    type="text">\n\n    <input\n    data-ng-if="inputPercentNeeded()"\n    type="number" data-ng-model="rule.matchingPercent"\n    class="form-control" placeholder="Seuil de matching...">\n\n</span>\n')}])}(window.angular);